{"version":3,"sources":["models/CountryModels.ts","models/index.ts","features/countries/countries-slice.ts","hooks/index.ts","components/Filter.tsx","components/FlagCard.tsx","components/Header.tsx","components/Search.tsx","features/countries/country-api-service.ts","components/FlagList.tsx","components/FlagDetail.tsx","components/MessagePresenter.tsx","pages/DetailPage.tsx","pages/StartPage.tsx","App.tsx","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["Regions","id","name","unavailable","countrySlice","createSlice","initialState","countries","names","searchQuery","selectedRegion","themeMode","reducers","setCountries","state","action","payload","setSearchQuery","setSelectedRegion","setThemeMode","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","Filter","regions","country","dispatch","className","value","onChange","region","sregion","Button","icon","faChevronDown","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Options","allRegions","map","Option","disabled","FlagCard","to","src","flag","alt","population","capital","Header","onClick","localStorage","theme","window","matchMedia","matches","document","documentElement","classList","remove","add","faMoon","Search","useState","setValue","debouncedValue","delay","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","useDebounce","faSearch","type","placeholder","event","val","target","length","countryApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getCountries","query","getCountryByCode","code","getCountryByName","useGetCountriesQuery","useGetCountryByCodeQuery","FlagList","useGetCountryByNameQuery","data","error","isLoading","filteredItems","useMemo","filter","item","toLowerCase","includes","message","index","FlagDetail","nativeName","topLevelDomain","domain","currencies","currency","languages","language","subregion","borders","land","MessagePresenter","DetailPage","useParams","faLongArrowAltLeft","StartPage","App","basename","exact","path","component","store","configureStore","reducer","countryReducer","middleware","getDefaultMiddleware","concat","setupListeners","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a7d8698.chunk.js","sourcesContent":["export interface CountryModel {\n    name: string;\n    topLevelDomain: string[];\n    alpha2Code: string;\n    alpha3Code: string;\n    callingCodes: string[];\n    capital: string;\n    altSpellings: string[];\n    region: string;\n    subregion: string;\n    population: number;\n    latlng: number[];\n    demonym: string;\n    area: number;\n    gini: number;\n    timezones: string[];\n    borders: string[];\n    nativeName: string;\n    numericCode: string;\n    currencies: CurrencyModel[];\n    languages: LanguageModel[];\n    translations: TranslationsModel;\n    flag: string;\n    regionalBlocs: RegionalBlocModel[];\n    cioc: string;\n}\n\ninterface RegionalBlocModel {\n    acronym: string;\n    name: string;\n    otherAcronyms: any[];\n    otherNames: any[];\n}\n\ninterface TranslationsModel {\n    de: string;\n    es: string;\n    fr: string;\n    ja: string;\n    it: string;\n    br: string;\n    pt: string;\n    nl: string;\n    hr: string;\n    fa: string;\n}\n\ninterface LanguageModel {\n    iso639_1: string;\n    iso639_2: string;\n    name: string;\n    nativeName: string;\n}\n\ninterface CurrencyModel {\n    code: string;\n    name: string;\n    symbol: string;\n}\n\nexport interface RegionModel {\n    id: number;\n    name: string;\n    unavailable: boolean;\n}\n\nexport class Regions {\n    get allRegions(): RegionModel[] {\n        return [\n            { id: 0, name: \"All\", unavailable: false },\n            { id: 1, name: \"Africa\", unavailable: false },\n            { id: 2, name: \"Americas\", unavailable: false },\n            { id: 3, name: \"Asia\", unavailable: false },\n            { id: 4, name: \"Europe\", unavailable: false },\n            { id: 5, name: \"Oceania\", unavailable: false },\n        ];\n    }\n}\n","export * from \"./CountryModels\";\nexport * from \"./StoreModels\";\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { CountryModel, CountryStateModel, RegionModel } from \"../../models\";\n\nconst initialState: CountryStateModel = {\n    countries: [],\n    names: [],\n    searchQuery: \"\",\n    selectedRegion: null,\n    themeMode: \"\",\n};\n\nexport const countrySlice = createSlice({\n    name: \"country\",\n    initialState,\n    reducers: {\n        setCountries: (state, action: PayloadAction<CountryModel[]>) => {\n            state.countries = action.payload;\n        },\n        setSearchQuery: (state, action: PayloadAction<string>) => {\n            state.searchQuery = action.payload;\n        },\n        setSelectedRegion: (\n            state,\n            action: PayloadAction<RegionModel | null>\n        ) => {\n            state.selectedRegion = action.payload;\n        },\n        setThemeMode: (state, action: PayloadAction<string>) => {\n            state.themeMode = action.payload;\n        },\n    },\n});\n\nexport default countrySlice.reducer;\n\nexport const { setCountries, setSearchQuery, setSelectedRegion, setThemeMode } =\n    countrySlice.actions;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport type { AppDispatch, RootState } from \"../app/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n    useEffect(() => {\n        const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n}\n","import { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Listbox, Transition } from \"@headlessui/react\";\nimport React from \"react\";\nimport { setSelectedRegion } from \"../features/countries/countries-slice\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { RegionModel, Regions } from \"../models\";\n\nexport const Filter = () => {\n    const regions = new Regions();\n    const { selectedRegion } = useAppSelector((state) => state.country);\n    const dispatch = useAppDispatch();\n\n    const selectRegion = (sregion: RegionModel | null) => {\n        if (!sregion) return;\n\n        dispatch(setSelectedRegion(sregion.id === 0 ? null : sregion));\n    };\n\n    return (\n        <div className=\"relative\">\n            <Listbox\n                value={selectedRegion}\n                onChange={(region) => selectRegion(region)}\n            >\n                <div className=\"relative\">\n                    <Listbox.Button className=\"w-full border-0 rounded-md h-14 flex items-center justify-between pt-0 pr-5 pb-0 pl-6 bg-light-primary dark:bg-dark-primary shadow-sm\">\n                        <span className=\"text-sm font-semibold text-light-text dark:text-dark-text\">\n                            {selectedRegion\n                                ? selectedRegion.name\n                                : \"Filter by Region\"}\n                        </span>\n                        <span className=\"text-xs text-light-text dark:text-dark-text\">\n                            <FontAwesomeIcon icon={faChevronDown} />\n                        </span>\n                    </Listbox.Button>\n                    <Transition\n                        enter=\"transition duration-100 ease-out\"\n                        enterFrom=\"transform scale-95 opacity-0\"\n                        enterTo=\"transform scale-100 opacity-100\"\n                        leave=\"transition duration-75 ease-out\"\n                        leaveFrom=\"transform scale-100 opacity-100\"\n                        leaveTo=\"transform scale-95 opacity-0\"\n                    >\n                        <Listbox.Options className=\"mt-1 p-5 absolute w-full overflow-auto rounded-md bg-light-primary dark:bg-dark-primary shadow-lg\">\n                            {regions.allRegions.map((region) => (\n                                <Listbox.Option\n                                    key={region.id}\n                                    value={region}\n                                    disabled={region.unavailable}\n                                    className=\"py-2 cursor-pointer text-light-text dark:text-dark-text\"\n                                >\n                                    {region.name}\n                                </Listbox.Option>\n                            ))}\n                        </Listbox.Options>\n                    </Transition>\n                </div>\n            </Listbox>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CountryModel } from \"../models/CountryModels\";\n\ninterface Props {\n    country: CountryModel;\n}\nexport const FlagCard: React.FC<Props> = ({ country }) => {\n    return (\n        <Link\n            to={`/detail/${country.name}`}\n            className=\"hover:scale-105 transition shadow-sm\"\n        >\n            <div className=\"bg-light-primary dark:bg-dark-primary text-light-text dark:text-dark-text\">\n                <div>\n                    <img\n                        src={country.flag}\n                        alt=\"\"\n                        className=\"object-cover h-48 w-full\"\n                    />\n                </div>\n\n                <div className=\"px-8 py-8\">\n                    <header>\n                        <h2 className=\"text-xl font-black mb-6\">\n                            {country.name}\n                        </h2>\n                    </header>\n                    <div className=\"mb-2 text-sm\">\n                        <span className=\"font-semibold\">Population:</span>{\" \"}\n                        {country.population}\n                    </div>\n                    <div className=\"mb-2 text-sm\">\n                        <span className=\"font-semibold\">Region:</span>{\" \"}\n                        {country.region}\n                    </div>\n                    <div className=\"mb-2 text-sm\">\n                        <span className=\"font-semibold\">Capital:</span>{\" \"}\n                        {country.capital}\n                    </div>\n                </div>\n            </div>\n        </Link>\n    );\n};\n","import { faMoon } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { setThemeMode } from \"../features/countries/countries-slice\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\n\nexport const Header = () => {\n    const { themeMode } = useAppSelector((state) => state.country);\n    const dispatch = useAppDispatch();\n\n    const toggleTheme = () => {\n        if (\n            localStorage.theme === \"dark\" ||\n            (!(\"theme\" in localStorage) &&\n                window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n        ) {\n            document.documentElement.classList.remove(\"dark\");\n            document.documentElement.classList.add(\"light\");\n            localStorage.theme = \"light\";\n            dispatch(setThemeMode(\"Light\"));\n        } else {\n            document.documentElement.classList.remove(\"light\");\n            document.documentElement.classList.add(\"dark\");\n            localStorage.theme = \"dark\";\n            dispatch(setThemeMode(\"Dark\"));\n        }\n    };\n\n    return (\n        <div className=\"h-[160px] desktop:h-20 mb-12 shadow-sm bg-light-primary dark:bg-dark-primary\">\n            <div className=\"flex items-center justify-between container mx-auto h-full px-4\">\n                <div className=\"text-xl font-semibold text-light-text dark:text-dark-text\">\n                    Where in the world?\n                </div>\n\n                <div>\n                    <button\n                        className=\"bg-transparent border-0 flex gap-2 text-light-text dark:text-dark-text items-center\"\n                        onClick={toggleTheme}\n                    >\n                        <FontAwesomeIcon icon={faMoon} />\n                        <span className=\"font-semibold\">{themeMode} mode</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport { setSearchQuery } from \"../features/countries/countries-slice\";\nimport { useAppDispatch, useAppSelector, useDebounce } from \"../hooks\";\n\nexport const Search = () => {\n    const searchQuery = useAppSelector((state) => state.country.searchQuery);\n    const [value, setValue] = useState(\"\");\n    const debouncedValue = useDebounce<string>(value, 500);\n    const dispatch = useAppDispatch();\n\n    const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const val = event.target.value;\n        setValue(val);\n        if (val.length === 0) {\n            dispatch(setSearchQuery(\"\"));\n        }\n    };\n\n    useEffect(() => {\n        if (debouncedValue) {\n            dispatch(setSearchQuery(value));\n        }\n    }, [debouncedValue, dispatch, value]);\n\n    return (\n        <>\n            <div className=\"relative shadow-sm\">\n                <span className=\"left-10 absolute inset-y-0 flex items-center text-light-text dark:text-dark-text\">\n                    <FontAwesomeIcon icon={faSearch} />\n                </span>\n                <input\n                    type=\"text\"\n                    className=\"h-14 border-0 bg-light-primary dark:bg-dark-primary rounded-md w-full box-border pl-[74px] text-light-text dark:text-dark-text placeholder-light-text dark:placeholder-dark-text\"\n                    placeholder=\"Search for a country...\"\n                    value={value ? value : searchQuery}\n                    onChange={handleSearch}\n                />\n            </div>\n        </>\n    );\n};\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { CountryModel } from \"../../models\";\n\nexport const countryApi = createApi({\n    reducerPath: \"countryApi\",\n    baseQuery: fetchBaseQuery({ baseUrl: \"https://restcountries.eu/rest/v2/\" }),\n    tagTypes: [\"Countries\"],\n    endpoints: (builder) => ({\n        getCountries: builder.query<CountryModel[], string>({\n            query: (name) => `all`,\n        }),\n        getCountryByCode: builder.query<CountryModel, string>({\n            query: (code: string) => `alpha/${code}`,\n        }),\n        getCountryByName: builder.query<CountryModel[], string>({\n            query: (name: string) => `name/${name}`,\n        }),\n    }),\n});\n\nexport const {\n    useGetCountriesQuery,\n    useGetCountryByCodeQuery,\n    useGetCountryByNameQuery,\n} = countryApi;\n","import { useMemo } from \"react\";\nimport { FlagCard, MessagePresenter } from \"../components\";\nimport { useGetCountriesQuery } from \"../features/countries/country-api-service\";\nimport { useAppSelector } from \"../hooks\";\n\nexport const FlagList = () => {\n    const { searchQuery, selectedRegion } = useAppSelector(\n        (state) => state.country\n    );\n    const { data, error, isLoading } = useGetCountriesQuery(\"Sweden\");\n\n    const filteredItems = useMemo(() => {\n        if (data) {\n            return data.filter((item) => {\n                if (selectedRegion) {\n                    return (\n                        item.name\n                            .toLowerCase()\n                            .includes(searchQuery.toLowerCase()) &&\n                        item.region === selectedRegion.name\n                    );\n                } else {\n                    return item.name\n                        .toLowerCase()\n                        .includes(searchQuery.toLowerCase());\n                }\n            });\n        }\n    }, [data, selectedRegion, searchQuery]);\n\n    if (isLoading) return <MessagePresenter message=\"Loading ...\" />;\n\n    if (error)\n        return <MessagePresenter message=\"Error while fetching countries\" />;\n\n    if (!filteredItems) {\n        return <MessagePresenter message=\"Didnt find any countries.\" />;\n    }\n\n    return (\n        <div className=\"grid grid-cols-1 desktop:grid-cols-4 gap-16\">\n            {filteredItems.map((country, index) => (\n                <FlagCard country={country} key={index} />\n            ))}\n        </div>\n    );\n};\n","import React from \"react\";\nimport { MessagePresenter } from \"../components\";\nimport { useGetCountryByCodeQuery } from \"../features/countries/country-api-service\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n    name: string;\n}\n\nexport const FlagDetail: React.FC<Props> = ({ name }) => {\n    const { data, error, isLoading } = useGetCountryByCodeQuery(name);\n\n    if (isLoading) return <MessagePresenter message=\"Loading ...\" />;\n\n    if (error)\n        return <MessagePresenter message=\"Error while fetching countries\" />;\n\n    if (!data) {\n        return <MessagePresenter message=\"Didnt find that country.\" />;\n    }\n\n    return (\n        <div className=\"desktop:grid desktop:grid-cols-2 desktop:gap-36\">\n            <div>\n                <img src={data.flag} alt=\"\" className=\"object-cover w-full\" />\n            </div>\n\n            <div className=\"text-light-text dark:text-dark-text\">\n                <div className=\"font-semibold text-4xl mt-12 mb-12\">\n                    {data.name}\n                </div>\n\n                <div className=\"desktop:grid desktop:grid-cols-2 desktop:gap-4 desktop:mb-4 mb-6\">\n                    <div>\n                        <span className=\"font-semibold\">Native Name:</span>{\" \"}\n                        {data.nativeName}\n                    </div>\n                    <div>\n                        <span className=\"font-semibold\">Top Level Domain:</span>{\" \"}\n                        {data.topLevelDomain.map((domain, index) => (\n                            <span key={index}>{domain}</span>\n                        ))}\n                    </div>\n                    <div>\n                        <span className=\"font-semibold\">Population:</span>{\" \"}\n                        {data.population}\n                    </div>\n                    <div>\n                        <span className=\"font-semibold\">Currencies:</span>{\" \"}\n                        {data.currencies.map((currency, index) => (\n                            <span key={index}>{currency.name}</span>\n                        ))}\n                    </div>\n                    <div>\n                        <span className=\"font-semibold\">Region:</span>{\" \"}\n                        {data.region}\n                    </div>\n                    <div>\n                        <span className=\"font-semibold\">Languages:</span>{\" \"}\n                        {data.languages.map((language, index) => (\n                            <span key={index}>{language.name}</span>\n                        ))}\n                    </div>\n                </div>\n\n                <div className=\"mb-4\">\n                    <span className=\"font-semibold\">Sub Region:</span>{\" \"}\n                    {data.subregion}\n                </div>\n\n                <div className=\"mb-12\">\n                    <span className=\"font-semibold\">Capital:</span>{\" \"}\n                    {data.capital}\n                </div>\n\n                {data.borders.length > 0 && (\n                    <div className=\"desktop:flex desktop:items-center desktop:gap-4\">\n                        <div className=\"mb-4 desktop:mb-0 text-2xl\">\n                            Border Countries:\n                        </div>\n                        <div className=\"flex items-center gap-4 flex-wrap\">\n                            {data.borders.map((land, index) => (\n                                <Link\n                                    to={`/detail/${land}`}\n                                    key={index}\n                                    className=\"bg-light-primary dark:bg-dark-primary text-light-text dark:text-dark-text py-1 px-5 inline-block text-xs rounded-md shadow-md\"\n                                >\n                                    {land}\n                                </Link>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\ninterface Props {\n    message: string;\n}\n\nexport const MessagePresenter: React.FC<Props> = ({ message }) => {\n    return (\n        <div className=\"container mx-auto px-4 text-light-text dark:text-dark-text\">\n            {message}\n        </div>\n    );\n};\n","import { faLongArrowAltLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { FlagDetail } from \"../components\";\n\nexport const DetailPage = () => {\n    let { name } = useParams<Record<string, string | undefined>>();\n\n    if (!name) {\n        return (\n            <div className=\"container mx-auto px-4 text-light-text dark:text-dark-text\">\n                Must have a name\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container mx-auto px-4 pb-10\">\n            <div className=\"mb-[80px] pt-10\">\n                <Link\n                    to=\"/\"\n                    className=\"bg-light-primary dark:bg-dark-primary text-light-text dark:text-dark-text py-3 px-10 inline-flex gap-3 items-center rounded-md shadow-lg\"\n                >\n                    <>\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\n                        Back\n                    </>\n                </Link>\n            </div>\n\n            <FlagDetail name={name} />\n        </div>\n    );\n};\n","import { Search, Filter, FlagList } from \"../components\";\n\nexport const StartPage = () => {\n    return (\n        <div className=\"container mx-auto px-4 pb-10\">\n            {/* Top */}\n            <div className=\"desktop:flex desktop:justify-between\">\n                <div className=\"mb-10 desktop:mb-20 w-full desktop:w-[480px]\">\n                    <Search />\n                </div>\n                <div className=\"w-[200px] mb-10 desktop:mb-0\">\n                    <Filter />\n                </div>\n            </div>\n\n            {/* Cards */}\n            <FlagList />\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { Header } from \"./components\";\nimport { DetailPage } from \"./pages/DetailPage\";\nimport { StartPage } from \"./pages/StartPage\";\nimport { useAppDispatch } from \"./hooks\";\nimport { setThemeMode } from \"./features/countries/countries-slice\";\n\nconst App = () => {\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (\n            localStorage.theme === \"dark\" ||\n            (!(\"theme\" in localStorage) &&\n                window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n        ) {\n            document.documentElement.classList.add(\"dark\");\n            dispatch(setThemeMode(\"Dark\"));\n        } else {\n            document.documentElement.classList.remove(\"dark\");\n            dispatch(setThemeMode(\"Light\"));\n        }\n    }, [dispatch]);\n\n    return (\n        <HashRouter basename=\"/\">\n            <div className=\"page-wrapper\">\n                <Header />\n\n                <Route exact path=\"/\" component={StartPage} />\n                <Route path=\"/detail/:name\" component={DetailPage} />\n            </div>\n        </HashRouter>\n    );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport countryReducer from \"../features/countries/countries-slice\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport { countryApi } from \"../features/countries/country-api-service\";\n\nconst store = configureStore({\n    reducer: {\n        country: countryReducer,\n        [countryApi.reducerPath]: countryApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().concat(countryApi.middleware),\n});\n\nsetupListeners(store.dispatch);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.scss\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./app/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}